{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _scrollSpy = require('./scroll-spy');\nvar _scrollSpy2 = _interopRequireDefault(_scrollSpy);\nvar _scroller = require('./scroller');\nvar _scroller2 = _interopRequireDefault(_scroller);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _scrollHash = require('./scroll-hash');\nvar _scrollHash2 = _interopRequireDefault(_scrollHash);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar protoTypes = {\n  to: _propTypes2.default.string.isRequired,\n  containerId: _propTypes2.default.string,\n  container: _propTypes2.default.object,\n  activeClass: _propTypes2.default.string,\n  activeStyle: _propTypes2.default.object,\n  spy: _propTypes2.default.bool,\n  horizontal: _propTypes2.default.bool,\n  smooth: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),\n  offset: _propTypes2.default.number,\n  delay: _propTypes2.default.number,\n  isDynamic: _propTypes2.default.bool,\n  onClick: _propTypes2.default.func,\n  duration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),\n  absolute: _propTypes2.default.bool,\n  onSetActive: _propTypes2.default.func,\n  onSetInactive: _propTypes2.default.func,\n  ignoreCancelEvents: _propTypes2.default.bool,\n  hashSpy: _propTypes2.default.bool,\n  saveHashHistory: _propTypes2.default.bool,\n  spyThrottle: _propTypes2.default.number\n};\nexports.default = function (Component, customScroller) {\n  var scroller = customScroller || _scroller2.default;\n  var Link = function (_React$PureComponent) {\n    _inherits(Link, _React$PureComponent);\n    function Link(props) {\n      _classCallCheck(this, Link);\n      var _this = _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).call(this, props));\n      _initialiseProps.call(_this);\n      _this.state = {\n        active: false\n      };\n      return _this;\n    }\n    _createClass(Link, [{\n      key: 'getScrollSpyContainer',\n      value: function getScrollSpyContainer() {\n        var containerId = this.props.containerId;\n        var container = this.props.container;\n        if (containerId && !container) {\n          return document.getElementById(containerId);\n        }\n        if (container && container.nodeType) {\n          return container;\n        }\n        return document;\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        if (this.props.spy || this.props.hashSpy) {\n          var scrollSpyContainer = this.getScrollSpyContainer();\n          if (!_scrollSpy2.default.isMounted(scrollSpyContainer)) {\n            _scrollSpy2.default.mount(scrollSpyContainer, this.props.spyThrottle);\n          }\n          if (this.props.hashSpy) {\n            if (!_scrollHash2.default.isMounted()) {\n              _scrollHash2.default.mount(scroller);\n            }\n            _scrollHash2.default.mapContainer(this.props.to, scrollSpyContainer);\n          }\n          _scrollSpy2.default.addSpyHandler(this.spyHandler, scrollSpyContainer);\n          this.setState({\n            container: scrollSpyContainer\n          });\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        _scrollSpy2.default.unmount(this.stateHandler, this.spyHandler);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var className = \"\";\n        if (this.state && this.state.active) {\n          className = ((this.props.className || \"\") + \" \" + (this.props.activeClass || \"active\")).trim();\n        } else {\n          className = this.props.className;\n        }\n        var style = {};\n        if (this.state && this.state.active) {\n          style = _extends({}, this.props.style, this.props.activeStyle);\n        } else {\n          style = _extends({}, this.props.style);\n        }\n        var props = _extends({}, this.props);\n        for (var prop in protoTypes) {\n          if (props.hasOwnProperty(prop)) {\n            delete props[prop];\n          }\n        }\n        props.className = className;\n        props.style = style;\n        props.onClick = this.handleClick;\n        return _react2.default.createElement(Component, props);\n      }\n    }]);\n    return Link;\n  }(_react2.default.PureComponent);\n  var _initialiseProps = function _initialiseProps() {\n    var _this2 = this;\n    this.scrollTo = function (to, props) {\n      scroller.scrollTo(to, _extends({}, _this2.state, props));\n    };\n    this.handleClick = function (event) {\n      /*\r\n       * give the posibility to override onClick\r\n       */\n\n      if (_this2.props.onClick) {\n        _this2.props.onClick(event);\n      }\n\n      /*\r\n       * dont bubble the navigation\r\n       */\n\n      if (event.stopPropagation) event.stopPropagation();\n      if (event.preventDefault) event.preventDefault();\n\n      /*\r\n       * do the magic!\r\n       */\n      _this2.scrollTo(_this2.props.to, _this2.props);\n    };\n    this.spyHandler = function (x, y) {\n      var scrollSpyContainer = _this2.getScrollSpyContainer();\n      if (_scrollHash2.default.isMounted() && !_scrollHash2.default.isInitialized()) {\n        return;\n      }\n      var horizontal = _this2.props.horizontal;\n      var to = _this2.props.to;\n      var element = null;\n      var isInside = void 0;\n      var isOutside = void 0;\n      if (horizontal) {\n        var elemLeftBound = 0;\n        var elemRightBound = 0;\n        var containerLeft = 0;\n        if (scrollSpyContainer.getBoundingClientRect) {\n          var containerCords = scrollSpyContainer.getBoundingClientRect();\n          containerLeft = containerCords.left;\n        }\n        if (!element || _this2.props.isDynamic) {\n          element = scroller.get(to);\n          if (!element) {\n            return;\n          }\n          var cords = element.getBoundingClientRect();\n          elemLeftBound = cords.left - containerLeft + x;\n          elemRightBound = elemLeftBound + cords.width;\n        }\n        var offsetX = x - _this2.props.offset;\n        isInside = offsetX >= Math.floor(elemLeftBound) && offsetX < Math.floor(elemRightBound);\n        isOutside = offsetX < Math.floor(elemLeftBound) || offsetX >= Math.floor(elemRightBound);\n      } else {\n        var elemTopBound = 0;\n        var elemBottomBound = 0;\n        var containerTop = 0;\n        if (scrollSpyContainer.getBoundingClientRect) {\n          var _containerCords = scrollSpyContainer.getBoundingClientRect();\n          containerTop = _containerCords.top;\n        }\n        if (!element || _this2.props.isDynamic) {\n          element = scroller.get(to);\n          if (!element) {\n            return;\n          }\n          var _cords = element.getBoundingClientRect();\n          elemTopBound = _cords.top - containerTop + y;\n          elemBottomBound = elemTopBound + _cords.height;\n        }\n        var offsetY = y - _this2.props.offset;\n        isInside = offsetY >= Math.floor(elemTopBound) && offsetY < Math.floor(elemBottomBound);\n        isOutside = offsetY < Math.floor(elemTopBound) || offsetY >= Math.floor(elemBottomBound);\n      }\n      var activeLink = scroller.getActiveLink();\n      if (isOutside) {\n        if (to === activeLink) {\n          scroller.setActiveLink(void 0);\n        }\n        if (_this2.props.hashSpy && _scrollHash2.default.getHash() === to) {\n          var _props$saveHashHistor = _this2.props.saveHashHistory,\n            saveHashHistory = _props$saveHashHistor === undefined ? false : _props$saveHashHistor;\n          _scrollHash2.default.changeHash(\"\", saveHashHistory);\n        }\n        if (_this2.props.spy && _this2.state.active) {\n          _this2.setState({\n            active: false\n          });\n          _this2.props.onSetInactive && _this2.props.onSetInactive(to, element);\n        }\n      }\n      if (isInside && (activeLink !== to || _this2.state.active === false)) {\n        scroller.setActiveLink(to);\n        var _props$saveHashHistor2 = _this2.props.saveHashHistory,\n          _saveHashHistory = _props$saveHashHistor2 === undefined ? false : _props$saveHashHistor2;\n        _this2.props.hashSpy && _scrollHash2.default.changeHash(to, _saveHashHistory);\n        if (_this2.props.spy) {\n          _this2.setState({\n            active: true\n          });\n          _this2.props.onSetActive && _this2.props.onSetActive(to, element);\n        }\n      }\n    };\n  };\n  ;\n  Link.propTypes = protoTypes;\n  Link.defaultProps = {\n    offset: 0\n  };\n  return Link;\n};","map":null,"metadata":{},"sourceType":"script"}